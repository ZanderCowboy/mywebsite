---
description: 
globs: 
alwaysApply: false
---
# Project Structure and Conventions for mywebsite

## Constants Usage and Organization
- All constants (URLs, colors, routes, paddings, gaps, etc.) are defined in dedicated files within [lib/util/](mdc:lib/util).
- General constants (URLs, colors, routes, etc.) are in [constants.dart](mdc:lib/util/constants.dart).
- UI constants (gaps, paddings, border radii, etc.) are in [ui_constants.dart](mdc:lib/util/ui_constants.dart).
- Color constants are in [color_constants.dart](mdc:lib/util/color_constants.dart).
- Typography/text styles are in [typography.dart](mdc:lib/util/typography.dart) and grouped under the `Typo` class.
- All constants are imported via [export.dart](mdc:lib/util/export.dart) for convenience. When using constants, prefer importing from `export.dart` unless a more specific import is required.

## Class/File Organization
- Each class, widget, or model has its own file. For example, every model in [lib/models/](mdc:lib/models) (e.g., `about_me.dart`, `education.dart`) contains a single class.
- Widgets and sections in [lib/views/personal/details/widgets/](mdc:lib/views/personal/details/widgets) and [lib/views/personal/details/sections/](mdc:lib/views/personal/details/sections) are each defined in their own file.
- Data for sections is separated into individual files in [lib/views/personal/details/sections/data/](mdc:lib/views/personal/details/sections/data), each prefixed with an underscore (e.g., `_skills.dart`).

## Folder Structure
- The project is organized by feature and responsibility:
  - [lib/components/](mdc:lib/components): Reusable UI components.
  - [lib/models/](mdc:lib/models): Data models, one per file.
  - [lib/services/](mdc:lib/services): Service classes.
  - [lib/util/](mdc:lib/util): Constants, extensions, and utility functions.
  - [lib/views/](mdc:lib/views): Main UI views, further divided by feature (e.g., `home`, `personal`).
    - `details/`: Contains `sections/` (each section as its own file) and `widgets/` (each widget as its own file).
    - `profile/`: Profile-related widgets, each in its own file.
- Use `export.dart` files in directories to simplify imports and re-export multiple files.

## Best Practices
- When creating new widgets, models, or utility classes, always place each in its own file and update the relevant `export.dart` if present.
- When using constants, always check if a relevant constant already exists in the appropriate `util` file before creating a new one.
- For tests and mocks, always check for a `mocks.dart` file and use existing mocks if available.

