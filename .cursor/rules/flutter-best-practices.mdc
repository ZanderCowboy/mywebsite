---
description: 
globs: 
alwaysApply: true
---
# Flutter Development Best Practices

## Package Management in pubspec.yaml
- **Alphabetical Order**: All packages added to [pubspec.yaml](mdc:pubspec.yaml) must be added in alphabetical order within their respective sections (dependencies, dev_dependencies).
- **Section Organization**: Keep dependencies organized in the correct sections:
  - `dependencies`: Runtime dependencies
  - `dev_dependencies`: Development-only dependencies
  - `flutter`: Flutter-specific configurations
- **Version Management**: Use specific version constraints (e.g., `^2.4.1`) rather than `any` to ensure reproducible builds.

## Import Management and Organization
- **Unused Imports**: Always check for and remove unused imports before committing code.
- **Import Organization**: Organize imports in the following order:
  1. Dart SDK imports (e.g., `dart:io`, `dart:async`)
  2. Flutter imports (e.g., `package:flutter/material.dart`)
  3. Third-party package imports (alphabetically ordered)
  4. Local project imports (alphabetically ordered)
- **Import Sorting**: Use alphabetical order within each import category.
- **Export Files**: Prefer importing from [export.dart](mdc:lib/util/export.dart) files when available to reduce import complexity.

## Code Organization Examples
### Good Import Organization:
```dart
// Dart SDK imports
import 'dart:async';

// Flutter imports
import 'package:flutter/material.dart';

// Third-party imports (alphabetical)
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:google_fonts/google_fonts.dart';

// Local imports (alphabetical)
import '../models/about_me.dart';
import '../util/constants.dart';
import '../util/export.dart';
```

### Package Addition Example:
When adding a new package to [pubspec.yaml](mdc:pubspec.yaml), ensure it's placed alphabetically:
```yaml
dependencies:
  animated_text_kit: ^4.2.2
  cupertino_icons: ^1.0.2
  firebase_analytics: ^11.5.0
  firebase_core: ^3.14.0
  # New package should be added here alphabetically
  flutter_hooks: ^0.21.2
  flutter_svg: ^2.0.7
```

## Tools and Automation
- **Build Runner**: When needing to run build_runner, use melos as specified in the project setup.
- **Code Analysis**: Use the project's [analysis_options.yaml](mdc:analysis_options.yaml) for consistent code analysis rules.
- **Import Cleanup**: Consider using IDE features or tools to automatically organize and remove unused imports.

## Testing and Mocks
- **Mock Usage**: When writing tests and mocks are required, first look for a `mocks.dart` file and use existing mocks.
- **Test Organization**: Follow the same import organization rules in test files.
